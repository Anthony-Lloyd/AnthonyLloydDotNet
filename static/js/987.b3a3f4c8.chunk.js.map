{"version":3,"file":"static/js/987.b3a3f4c8.chunk.js","mappings":"qMAuHA,UA1GiC,WAC/B,IAAAA,GAA4CC,EAAAA,EAAAA,UAA0B,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlEI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAkExC,OAjBAI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,GAAAC,OAAMC,oBAAsB,qCAGzCC,MAUkBH,GATfI,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACG,IArDW,SAACA,GACvB,IAAMC,EAAWD,EAAKE,MAAM,OAAOC,KAAI,SAAAC,GACrC,IAAMC,EAAQD,EAAQF,MAAM,MAAMI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,MAAM,IACxDC,EAAgB,GAChBC,EAAiB,GACjBC,EAAmB,IACnBC,EAAwB,GAExBP,EAAM,GAAGQ,WAAW,QACtBJ,EAAQJ,EAAM,GAAGS,MAAM,GAAGN,QAG5B,IAAMO,EAAYV,EAAM,GAClBW,EAAeX,EAAM,GACrBY,EAAkBZ,EAAM,GAE9B,GAAIU,EAAUF,WAAW,YAAa,CACpC,IAAMK,EAAQH,EAAUG,MAAM,aAC1BA,GAASA,EAAM,KAEjBR,EAAM,GAAAhB,OAAMC,qBAAsBD,OAAGwB,EAAM,IAE/C,CAGA,GAAIF,EAAaH,WAAW,aAAc,CACxC,IAAMK,EAAQF,EAAaE,MAAM,cAC7BA,IACFP,EAAWQ,SAASD,EAAM,GAAI,IAElC,CAMA,OAJID,EAAgBJ,WAAW,oBAC7BD,EAAcK,EAAgBH,MAAM,IAAIZ,MAAM,KAAKC,KAAI,SAAAiB,GAAI,OAAIA,EAAKZ,MAAM,KAGrE,CACLC,MAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAC,YAAAA,EAEJ,IAEArB,EAAkBU,EACpB,CASQoB,CAAgBrB,EAClB,IACCsB,OAAM,WACLC,QAAQC,MAAM,4BAChB,GAIN,GAAG,IAGDC,IAAAA,cAAA,WAASC,UAAU,0BAA0BC,GAAG,kBAC9CF,IAAAA,cAAA,OAAKC,UAAU,aACbD,IAAAA,cAAA,OAAKC,UAAU,kDACdpC,EAAea,KAAI,SAACyB,EAAMC,GAAK,OACtCJ,IAAAA,cAAA,OAAKK,IAAKD,EAAOH,UAAU,OACzBD,IAAAA,cAAA,OAAKC,UAAU,0CACbD,IAAAA,cAAA,OAAKC,UAAU,iCAAgC,IAC7CD,IAAAA,cAAA,OAAKM,IAAKH,EAAKlB,OAAQsB,IAAKJ,EAAKnB,MAAOiB,UAAU,yBAEpDD,IAAAA,cAAA,OAAKC,UAAU,aACbD,IAAAA,cAAA,MAAIC,UAAU,cAAcE,EAAKnB,OACjCgB,IAAAA,cAAA,UACGG,EAAKhB,YAAYT,KAAI,SAACiB,EAAMa,GAAG,OAC9BR,IAAAA,cAAA,MAAIK,IAAKG,GAAMb,EAAU,KAGnBK,IAAAA,cAAA,OAAKC,UAAU,2BACfD,IAAAA,cAAA,OAAKC,UAAU,WAAWQ,MAAO,CAAEC,OAAQ,SACnDV,IAAAA,cAAA,OAAKC,UAAS,2DAAAhC,OAA+E,MAAlBkC,EAAKjB,SAAmB,aAAe,cAC7GyB,KAAK,cACL,gBAAeR,EAAKjB,SACpB,gBAAe,EACf,gBAAe,IACfuB,MAAO,CAAEG,MAAM,GAAD3C,OAAKkC,EAAKjB,SAAQ,OAChB,MAAlBiB,EAAKjB,SAAmB,YAAc,mBAMjC,MAMlB,C,gDCpHA,WAAiB,C,8BCAjB,WAAiB,C","sources":["pages/Certifications.tsx","webpack://AnthonyLloydDotNet/./src/pages/styles/_navadjust.css?6342","webpack://AnthonyLloydDotNet/./src/pages/styles/certifications.css?df7a"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { marked } from 'marked';\nimport '../index.css';\nimport './styles/_navadjust.css';\nimport './styles/certifications.css';\n\ninterface Certification {\n  title: string;\n  imgUrl: string;\n  progress: number;\n  description: string[];\n}\n\nconst Certifications: React.FC = () => {\n  const [certifications, setCertifications] = useState<Certification[]>([]);\n\n  const processMarkdown = (data: string) => {\n    const sections = data.split('---').map(section => {\n      const lines = section.split('\\n').filter(line => line.trim());\n      let title: string = '';\n      let imgUrl: string = '';\n      let progress: number = 100;\n      let description: string[] = [];\n\n      if (lines[0].startsWith('# ')) {\n        title = lines[0].slice(2).trim(); // Get title after '# '\n      }\n\n      const imageLine = lines[1];\n      const progressLine = lines[2];\n      const descriptionLine = lines[3];\n\n      if (imageLine.startsWith('![image]')) {\n        const match = imageLine.match(/\\((.*?)\\)/);\n        if (match && match[1]) {\n          // Prepend the public URL to the image URL\n          imgUrl = `${process.env.PUBLIC_URL}${match[1]}`;\n        }\n      }\n      \n\n      if (progressLine.startsWith('![status]')) {\n        const match = progressLine.match(/\\((\\d+)%\\)/);\n        if (match) {\n          progress = parseInt(match[1], 10);\n        }\n      }\n\n      if (descriptionLine.startsWith('![description]')) {\n        description = descriptionLine.slice(16).split('/').map(item => item.trim()); // Extract and split description\n      }\n\n      return {\n        title,\n        imgUrl,\n        progress,\n        description,\n      };\n    });\n\n    setCertifications(sections);\n  };\n\n  useEffect(() => {\n    const localPath = `${process.env.PUBLIC_URL}/certifications/certifications.md`;\n\n    const fetchCertifications = (path: RequestInfo | URL) => {\n      fetch(path)\n        .then((response) => response.text())\n        .then((data) => {\n          processMarkdown(data);\n        })\n        .catch(() => {\n          console.error('Error fetching local file');\n        });\n    };\n\n    fetchCertifications(localPath);\n  }, []);\n\n  return (\n    <section className=\"bg-light text-dark py-5\" id=\"Certifications\">\n      <div className=\"container\">\n        <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\">\n        {certifications.map((cert, index) => (\n  <div key={index} className=\"col\">\n    <div className=\"card bg-light text-dark border-0 h-100\">\n      <div className=\"certification-image-container\"> {/* This div is the container for the image */}\n        <img src={cert.imgUrl} alt={cert.title} className=\"certification-image\" />\n      </div>\n      <div className=\"card-body\">\n        <h3 className=\"card-title\">{cert.title}</h3>\n        <ul>\n          {cert.description.map((item, idx) => (\n            <li key={idx}>{item}</li>\n          ))}\n        </ul>\n                  <div className=\"card-progress-container\">\n                  <div className=\"progress\" style={{ height: '20px' }}>\n          <div className={`progress-bar progress-bar-striped progress-bar-animated ${cert.progress === 100 ? 'bg-success' : 'bg-warning'}`}\n               role=\"progressbar\"\n               aria-valuenow={cert.progress}\n               aria-valuemin={0}\n               aria-valuemax={100}\n               style={{ width: `${cert.progress}%` }}>\n            {cert.progress === 100 ? 'Completed' : 'In Progress'}\n          </div>\n        </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Certifications;\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["_useState","useState","_useState2","_slicedToArray","certifications","setCertifications","useEffect","localPath","concat","process","fetch","then","response","text","data","sections","split","map","section","lines","filter","line","trim","title","imgUrl","progress","description","startsWith","slice","imageLine","progressLine","descriptionLine","match","parseInt","item","processMarkdown","catch","console","error","React","className","id","cert","index","key","src","alt","idx","style","height","role","width"],"sourceRoot":""}