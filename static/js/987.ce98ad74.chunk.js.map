{"version":3,"file":"static/js/987.ce98ad74.chunk.js","mappings":"+MA0GA,UAlGiC,WAC/B,IAAAA,GAA4CC,EAAAA,EAAAA,UAAgB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAsExC,OApEAI,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAY,oCAGZC,EAAc,CAClB,gGACA,oEAIIC,EAAkB,SAACC,GACvB,IAAMC,EAAWD,EAAKE,MAAM,OAAOC,KAAI,SAAAC,GACrC,IAAMC,EAAW,IAAIC,EAAAA,GAAOC,SACxBC,EAAQ,GAAIC,EAAS,GAEzBJ,EAASK,QAAU,SAACC,GAAyB,OAAdH,EAAQG,EAAa,EAAI,EACxDN,EAASO,MAAQ,SAACC,EAAML,EAAOG,GAA0B,OAAfF,EAASI,EAAa,EAAI,EAEpE,IAAMC,GAAcR,EAAAA,EAAAA,IAAOF,EAAQW,OAAQ,CAAEV,SAAAA,IAE7C,MAAO,CACLG,MAAAA,EACAC,OAAAA,EACAK,YAAAA,EAEJ,IAEAnB,EAAkBM,EACpB,EA6BAe,MAAMnB,GACHoB,MAAK,SAACC,GAAQ,OAAKA,EAASP,MAAM,IAClCM,MAAK,SAACE,GACL,IAAMC,EAAeD,EAAUE,MAAM,mBAC/BC,EAAeF,EAAeA,EAAa,GAAK,KA9B9B,SAACG,EAAyBD,GACpDN,MAAMO,GACHN,MAAK,SAACC,GAAQ,OAAKA,EAASP,MAAM,IAClCM,MAAK,SAACjB,GAEL,IAAMoB,EAAepB,EAAKqB,MAAM,oBACZD,EAAeA,EAAa,GAAK,MAGlCE,EACjBvB,EAAgBC,GAEhBgB,MAAMnB,GACHoB,MAAK,SAACC,GAAQ,OAAKA,EAASP,MAAM,IAClCM,MAAK,SAACE,GAAS,OAAKpB,EAAgBoB,EAAU,GAErD,IACCK,OAAM,WAELR,MAAMnB,GACHoB,MAAK,SAACC,GAAQ,OAAKA,EAASP,MAAM,IAClCM,MAAK,SAACE,GAAS,OAAKpB,EAAgBoB,EAAU,GACnD,GACJ,CASIM,CAAoB3B,EAAY,GAAIwB,EACtC,GACJ,GAAG,IAGDI,IAAAA,cAAA,WAASC,UAAU,0BAA0BC,GAAG,kBAC9CF,IAAAA,cAAA,OAAKC,UAAU,aACbD,IAAAA,cAAA,OAAKC,UAAU,mCACbD,IAAAA,cAAA,OAAKC,UAAU,wBACbD,IAAAA,cAAA,MAAIC,UAAU,aAAY,oBAI9BD,IAAAA,cAAA,OAAKC,UAAU,kDACZjC,EAAeS,KAAI,SAAC0B,EAAMC,GAAK,OAC9BJ,IAAAA,cAAA,OAAKK,IAAKD,EAAOH,UAAU,OACzBD,IAAAA,cAAA,OAAKC,UAAU,0CACbD,IAAAA,cAAA,OAAKM,IAAKH,EAAKpB,OAAQwB,IAAKJ,EAAKrB,MAAOmB,UAAU,0BAClDD,IAAAA,cAAA,OAAKC,UAAU,aACbD,IAAAA,cAAA,MAAIC,UAAU,cAAcE,EAAKrB,OACjCkB,IAAAA,cAAA,OAAKQ,wBAAyB,CAAEC,OAAQN,EAAKf,iBAG7C,MAMlB,C,gDCvGA,WAAiB,C,8BCAjB,WAAiB,C","sources":["pages/Certifications.tsx","webpack://AnthonyLloydDotNet/./src/pages/styles/_navadjust.css?6342","pages/styles/certifications.css"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { marked } from 'marked'; // corrected the import statement\nimport '../index.css';\nimport './styles/_navadjust.css';\nimport './styles/certifications.css';\n\n\n\nconst Certifications: React.FC = () => {\n  const [certifications, setCertifications] = useState<any[]>([]);\n\n  useEffect(() => {\n    // Local file path\n    const localPath = '/certifications/certifications.md';\n  \n    // Remote file paths\n    const remotePaths = [\n      'https://raw.githubusercontent.com/Anthony-Lloyd02/AnthonyLloydDotNet/main/public/cert/cert.md',\n      'https://drive.google.com/uc?id=1xN1Gmcl0XGvFJNEonACmxtazVU-PqFCY'\n    ];\n  \n    // Function to fetch and process markdown data\n    const processMarkdown = (data: string) => {\n      const sections = data.split('---').map(section => {\n        const renderer = new marked.Renderer();\n        let title = '', imgUrl = '';\n  \n        renderer.heading = (text) => { title = text; return ''; };\n        renderer.image = (href, title, text) => { imgUrl = href; return ''; };\n  \n        const htmlContent = marked(section.trim(), { renderer });\n  \n        return {\n          title,\n          imgUrl,\n          htmlContent\n        };\n      });\n  \n      setCertifications(sections);\n    };\n  \n    // Function to fetch certification data\n    const fetchCertifications = (path: RequestInfo | URL, localVersion: string | number) => {\n      fetch(path)\n        .then((response) => response.text())\n        .then((data) => {\n          // Extract the version from the markdown file\n          const versionMatch = data.match(/# version (\\d+)/);\n          const fileVersion = versionMatch ? versionMatch[1] : '0';\n  \n          // Compare versions and decide which file to use\n          if (fileVersion >= localVersion) {\n            processMarkdown(data);\n          } else {\n            fetch(localPath)\n              .then((response) => response.text())\n              .then((localData) => processMarkdown(localData));\n          }\n        })\n        .catch(() => {\n          // If there's an error fetching the remote, use the local data\n          fetch(localPath)\n            .then((response) => response.text())\n            .then((localData) => processMarkdown(localData));\n        });\n    };\n  \n    // Initial fetch for the local version\n    fetch(localPath)\n      .then((response) => response.text())\n      .then((localData) => {\n        const versionMatch = localData.match(/# version (\\d+)/);\n        const localVersion = versionMatch ? versionMatch[1] : '0';\n        // Use the first remote path by default, or iterate through them if necessary\n        fetchCertifications(remotePaths[0], localVersion);\n      });\n  }, []);\n\n  return (\n    <section className=\"bg-light text-dark py-5\" id=\"Certifications\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center mb-5\">\n          <div className=\"col-lg-8 text-center\">\n            <h2 className=\"display-4\">Certifications</h2>\n          </div>\n        </div>\n        \n        <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\">\n          {certifications.map((cert, index) => (\n            <div key={index} className=\"col\">\n              <div className=\"card bg-light text-dark border-0 h-100\">\n                <img src={cert.imgUrl} alt={cert.title} className=\"img-fluid rounded-top\"/>\n                <div className=\"card-body\">\n                  <h3 className=\"card-title\">{cert.title}</h3>\n                  <div dangerouslySetInnerHTML={{ __html: cert.htmlContent }} />\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Certifications;\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["_useState","useState","_useState2","_slicedToArray","certifications","setCertifications","useEffect","localPath","remotePaths","processMarkdown","data","sections","split","map","section","renderer","marked","Renderer","title","imgUrl","heading","text","image","href","htmlContent","trim","fetch","then","response","localData","versionMatch","match","localVersion","path","catch","fetchCertifications","React","className","id","cert","index","key","src","alt","dangerouslySetInnerHTML","__html"],"sourceRoot":""}